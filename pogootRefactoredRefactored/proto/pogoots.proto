syntax = "proto3";
package pogootRefactoredRefactored;


//Note card stuff
service NotecardService{
  rpc Upload(NotecardListUploadRequest) returns (NotecardUploadResponse);
  //Due to mistakes, this function now returns a list of notecard titles and descriptions
  rpc Fetch(NotecardLibraryRequest) returns (NotecardLibraryList);
  rpc Modify(NotecardModifyRequest) returns (NotecardUploadResponse);
  rpc GetNotecards(NotecardFetchRequest) returns (NotecardFetchResponse);
}

//The title is the new title, cfid is its own field
//Fields can be none - Those will not be modified
message NotecardModifyRequest{
  optional NotecardList notecards = 1;
  string auth_token = 3;
  optional string title = 4;
  optional string description = 5;
  optional string tags = 6;
  optional string school = 7;
  string username = 8;
  string cfid = 9;
}
//Notecard Library Request -
//Fetch the list of notecards owned by a user
message NotecardLibraryRequest{
  string username = 1;
  string auth_token = 2;
}

message NotecardListUploadRequest{
  NotecardList notecards = 1;
  string auth_token = 3;
  string title = 4;
  string description = 5;
  string tags = 6;
  string school = 7;
  string username = 8;
}

message NotecardList{
  repeated Notecard notecards = 1;
}

message NotecardLibraryList{
  repeated NotecardLibraryData library = 1;
  bool success = 2;
}

message NotecardFetchRequest{
  string id = 1;
  optional string auth = 2;
  optional string username = 3;
}

message NotecardFetchResponse{
  bool success = 1;
  NotecardList notecards = 2;
}

// pub title: String,
// pub school: String,
// pub tags: String,
// pub desc: String,
// pub CFID: String
message NotecardLibraryData{
  string title = 1;
  string school = 2;
  string tags = 3;
  string desc = 4;
  string CFID = 5;
  string date = 6;
  int32 terms = 7;
}

message Notecard{
  repeated string front = 1;
  repeated string back = 2;
}

message NotecardUploadResponse{
  bool success = 1;
  string id = 2;
}


//User stuff
service LoginServer{
  rpc Login(UserLoginRequest) returns (LoginResponse);
  rpc Register(UserRegisterWithEmailRequest) returns (LoginResponse);
  rpc Update(UserPasswordUpdateRequest) returns (LoginResponse);

}
message UserRegisterWithEmailRequest{
  string email = 1;
  string password = 2;
  string username = 3;
}

//Email counts as either username or email
message UserLoginRequest{
  string email = 1;
  string password = 2;
}

//Email counts as either username or email
message UserPasswordUpdateRequest{
  string email = 1;
  string password = 2;
}

//Mystery contains either an error message or the token
message LoginResponse{
  bool success = 1;
  string mystery = 2;
}

service PogootPlayerServer{
  //Starts conversation with the server
  rpc Join(PogootRequest) returns (PogootJoinCode);
  //Answering is essentially posting to the server
  rpc Answer(stream PogootAnswerRequest) returns (stream PogootResultsResponse);
  rpc EstablishQuestionStream(PogootJoinCode) returns (stream PogootQuestion);
}

//Join the game
message PogootRequest{
  //the specific id of the game
  string gameid = 1;
  //the tmp username assigned to the player(Non unique). This username does not correspond to an account. E.g. Display name
  string username = 2;
}

message PogootJoinCode{
  //After Joining, the server will return a tempuuid that will identify the user. This uuid will be sent to initialize the streams
  string tempuuid = 1;
}

message PogootQuestionList{
  repeated PogootQuestion questions = 1;
}

message PogootQuestion{
  string question = 1;
  repeated string choices = 2;
}

message PogootResultsResponse{
  int32 rank = 1;
  string position = 2;
}

message PogootAnswerRequest{
  int32 answerIndex = 1;
  //verification required once per stream connection
  optional string tempuuid = 2;
}

service LeadServer{
  rpc Create(PogootCreationRequest) returns (PogootCreationResponse);
  rpc FinishRound(Progress) returns (RoundResultResponse);
  rpc StartNextRound(Progress) returns (PogootQuestion);
  rpc Manage(ManagerPlayerRequest) returns (Progress);
  rpc PlayerJoins(Progress) returns (stream GameStartInfoResponse);
}

message PogootCreationRequest{
  //an existing notecard's id
  string id = 1;
}
message PogootCreationResponse{
  string gameid = 1;
}
message Progress{
  
}
message RoundResultResponse{
  repeated int32 answerdistro = 1;
  repeated string inthelead = 2;
}
message ManagerPlayerRequest{
  string id = 1;
  optional string rename = 2;
  optional bool kick = 3;
}
message GameStartInfoResponse{
  optional string newplayer = 1;
  optional string gamePin = 2;
}
