---
import { ViewTransitions } from "astro:transitions";
import NavBar from "../components/NavBar.astro";
import AlertBox from "../components/AlertBox.astro";
import LoginDialog from "../components/LoginDialog.astro";
import CookieBanner from "../components/CookieBanner.astro";
interface Props {
	title: string;
}
const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="mdui-theme-auto">
	<head>
		<meta charset="UTF-8" />

		<link rel="stylesheet" href="https://unpkg.com/mdui@2/mdui.css" />
		<script is:inline src="/js/mdui.global.js"></script>
		<meta name="description" content="A Free Notecard Website" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="stylesheet" href="/fonts.css" />
		<link
			href="https://fonts.googleapis.com/icon?family=Material+Icons"
			rel="stylesheet"
		/>
		<link
			href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined"
			rel="stylesheet"
		/>
		<link
			href="https://fonts.googleapis.com/icon?family=Material+Icons+Round"
			rel="stylesheet"
		/>
		<link
			href="https://fonts.googleapis.com/icon?family=Material+Icons+Sharp"
			rel="stylesheet"
		/>
		<link
			href="https://fonts.googleapis.com/icon?family=Material+Icons+Two+Tone"
			rel="stylesheet"
		/>

		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body>
		<CookieBanner />
		<NavBar />
		<LoginDialog />
		<div id="slot_container">
			<slot />

			<div id="footer-line">
				<mdui-divider middle></mdui-divider>
			</div>
			<footer id="footer">
				<div id="footer-div">
					<div id="footer-title">
						<h2 class="footer-titles">Sweep.rs</h2>
						<p id="motto-p">Learning Free Forever</p>
					</div>
					<div id="contacts">
						<!-- <h2 class="footer-titles">Contact Us</h2> -->
						<div id="contacts-sub">
							<a href="https://github.com/he00741098/pogoot">
								<div id="svg-git">
									<svg
										viewBox="0 0 100 100"
										xmlns="http://www.w3.org/2000/svg"
										aria-hidden="true"
										role="img"
										><path
											clip-rule="evenodd"
											d="M50 5.7C24.9 5.7 4.5 26 4.6 51.2c0 19.6 12.5 36.9 31.1 43.1 2.3.4 3.1-1 3.1-2.2s0-3.9-.1-7.7c-12.6 2.7-15.3-6.1-15.3-6.1-2.1-5.3-5-6.7-5-6.7-4.1-2.9.3-2.8.3-2.8 4.6.3 7 4.7 7 4.7 4.1 6.9 10.6 4.9 13.2 3.8.2-2.3 1.2-4.5 2.9-6.1-10.2-1.1-20.8-5-20.8-22.5-.1-4.5 1.6-8.9 4.7-12.2-.5-1.1-2-5.7.4-12 0 0 3.8-1.2 12.5 4.7 7.4-2 15.3-2 22.8 0 8.7-5.9 12.4-4.7 12.4-4.7 2.5 6.3 1 10.9.5 12 3.1 3.3 4.8 7.7 4.7 12.2 0 17.5-10.6 21.4-20.8 22.4 1.6 1.4 3.1 4.2 3.1 8.4 0 6.1-.1 11-.1 12.4 0 1.2.8 2.6 3.1 2.2 23.8-8 36.6-33.8 28.6-57.6C86.8 18.2 69.5 5.7 50 5.7z"
											fill="currentColor"
											fill-rule="evenodd"></path><iframe
											xmlns="http://www.w3.org/1999/xhtml"
											class="cleanslate hidden"
											src="moz-extension://be8d8a17-bac8-447f-90e8-13d5dd315ae6/static/commandline.html"
											id="cmdline_iframe"
											loading="lazy"
											style="height: 0px !important;"></iframe></svg
									>
								</div>
							</a><a href="mailto:support@sweep.rs"
								><mdui-icon name="email" id="email-icon"></mdui-icon></a
							>
						</div>
					</div>
					<div id="legal">
						<a href="/TOS.txt">Terms Of Service</a>
						<a href="/Privacy">Privacy Policy</a>
						<a href="/Cookies">Cookies</a>
						<a href="/report">Feedback</a>
					</div>
				</div>
			</footer>
		</div>
		<AlertBox />

		<style is:global>
			#motto-p {
				margin-top: 0;
			}
			#svg-git {
				width: 50px;
			}
			#email-icon {
				font-size: 50px;
			}
			#contacts-sub {
				display: flex;
				/* justify-content: center; */
				/* position: ; */
				width: fit-content;
				margin-left: 20px;
			}
			#footer-line {
				bottom: 0;
				/* top: 100%; */
				width: calc(100% - 80px);
				left: 45px;
				position: absolute;
				/* z-index: 10; */
			}
			#footer {
				top: 100%;
				position: absolute;
				left: 80px;
				width: calc(100% - 80px);
				display: flex;
				/* align-content: center; */
				justify-content: center;
				margin-top: 20px;
				margin-bottom: 40px;

				/* background-color: rgb(var(--mdui-color-surface-bright)); */
			}
			#contacts {
				/* display: inline-block; */
				display: grid;
				justify-content: right;
				align-content: center;
			}
			/* #legal { */
			/* color: black; */
			/* } */
			/* #footer > a:hover { */
			/* 	text-decoration: underline; */
			/* } */
			#legal {
				text-decoration: underline;
				display: flex;
				justify-content: space-between;
				grid-column: 1/3;
				/* width: 50%; */
				text-align: center;
				margin-bottom: 10px;
				/* justify-content: center; */
			}
			#footer-div {
				width: 25%;
				display: grid;
				grid-template-columns: 1fr 1fr;
				grid-template-rows: 110px 40px;
				justify-content: space-between;
			}
			.footer-titles {
				margin-bottom: 5px;
			}
			#contacts {
			}
			#slot_container {
			}
			:not(:defined) {
				visibility: hidden;
			}

			#slot_container {
				width: calc(100% - 80px);
				min-height: 100%;
				height: fit-content;
				position: absolute;
				left: 80px;
				top: 0px;
				/* overflow: hidden; */
				display: grid;
				/* margin: 0; */
			}
			:root {
				--green: #00ff5f;
				--blue: #0a0163;
				--orange: #ff5f00;
				--purple: #3c0163;
				--pink: #630159;
				/* --md-ref-typeface-brand: LeagueSpartan; */
				/* --md-ref-typeface-plain: LeagueSpartan; */
				/* --md-sys-color-primary: #0A0163; */
				/* --md-sys-color-on-primary: #908EA6; */
				/* --md-sys-color-primary-container: #6FF7F6; */
				/* --md-sys-color-on-primary-container: #002020; */
			}
			html {
				margin: 0;
			}
			body {
				font-family: LeagueSpartan;
				font-size: 20px;
			}

			.mdui-theme-dark {
				color: #fff;
				background-color: var(--blue);
			}
			@media (prefers-color-scheme: dark) {
				.mdui-theme-auto {
					color: #fff;
					background-color: var(--blue);
				}
			}
			a {
				color: white;
				text-decoration: none;
			}
		</style>
		<script>
			import { navigate } from "astro:transitions/client";
			window.redirect = function redirect() {
				navigate("/library");
			};
			window.redirect_to = function redirect_to(url) {
				navigate(url);
			};
		</script>
		<script src="../proto/result.js"></script>
		<script src="../proto/result_library.js"></script>
		<script src="../proto/result_login.js"></script>
		<script src="../proto/notecard.js"></script>
		<script>
			document.addEventListener("astro:page-load", function () {
				const mdui = window.mdui;
				// mdui.setColorScheme("#0a0163");

				if (document.URL.indexOf("account") < 1) {
					return;
				}
				let resize_events = 0;
				function draw() {
					console.log("Drawing");
					const canvas = document.getElementById("canvas");
					let height = (canvas.height = window.innerHeight);

					let width = (canvas.width = window.innerWidth - 80);
					if (canvas.getContext) {
						const ctx = canvas.getContext("2d");
						// for (var i = 0; i < width; i += 50) {
						//   let distance_from_center = Math.abs(width / 2 - i) / (width / 2);
						//   ctx.fillRect(
						//     i,
						//     converterY(0, Math.floor(height * distance_from_center)),
						//     25,
						//     Math.floor(height * distance_from_center),
						//   );
						//   ctx.beginPath();
						//   ctx.arc(i, converterY(i, 0), 10, 0, Math.PI * 2, false);
						//   ctx.fill();
						// }

						window.onresize = function () {
							if (resize_events > 10) {
								let height = (canvas.height = window.innerHeight);
								let width = (canvas.width = window.innerWidth);
								return;
							}
							resize_events++;
							ctx.clearRect(0, 0, canvas.width, canvas.height);
							draw();
						};
						for (var i = 0; i < 1000; i += 1) {
							let randomY = Math.floor(Math.random() * height);
							let randomX = Math.floor(Math.random() * width);
							let randomChoice = Math.floor(Math.random() * 6);
							let additionalRandomness = random(100);
							switch (randomChoice) {
								case 1:
									ctx.beginPath();
									ctx.moveTo(randomX, randomY);
									ctx.fillStyle =
										"rgb(" +
										random(255) +
										" " +
										random(255) +
										" " +
										random(255) +
										")";
									ctx.shadowOffsetX = random(20) * Math.pow(-1, random(2) + 1);
									ctx.shadowOffsetY = random(20) * Math.pow(-1, random(2) + 1);
									ctx.shadowBlur = 2;
									ctx.shadowColor = "black";

									ctx.arc(
										randomX,
										randomY,
										Math.floor(Math.random() * 50),
										0,
										Math.PI * 2,
										false,
									);

									ctx.fill();
									ctx.closePath();
									break;
								case 2:
									if (additionalRandomness > 5) {
										break;
									}
									ctx.beginPath();
									ctx.moveTo(randomX, randomY);
									let randompoint1X =
										randomX + random(200) * Math.pow(-1, random(2) + 1);
									let randompoint1Y =
										randomY + random(200) * Math.pow(-1, random(2) + 1);
									let randompoint2X =
										randomX + random(200) * Math.pow(-1, random(2) + 1);
									let randompoint2Y =
										randomY + random(200) * Math.pow(-1, random(2) + 1);
									let randomYdest = Math.floor(Math.random() * height);
									let randomXdest = Math.floor(Math.random() * width);
									ctx.bezierCurveTo(
										randompoint1X,
										randompoint1Y,
										randompoint2X,
										randompoint2Y,
										randomXdest,
										randomYdest,
									);
									// ctx.moveTo(randomXdest, randomYdest);

									let randompoint3X =
										randomXdest + random(20) * Math.pow(-1, random(2) + 1);
									let randompoint3Y =
										randomYdest + random(20) * Math.pow(-1, random(2) + 1);
									let randompoint4X =
										randomXdest + random(20) * Math.pow(-1, random(2) + 1);
									let randompoint4Y =
										randomYdest + random(20) * Math.pow(-1, random(2) + 1);
									ctx.bezierCurveTo(
										randompoint3X,
										randompoint3Y,
										randompoint4X,
										randompoint4Y,
										randomX,
										randomY,
									);
									ctx.closePath();
									ctx.fill();
									break;
								case 3:
									ctx.fillRect(randomX, randomY, random(30), random(30));
									break;
							}
							//draw circle
							//draw curved thing
							//draw box
							//draw lines
							//draw curves
						}
					}
				}
				function random(max) {
					return Math.floor(Math.random() * max);
				}
				function converterY(y, height) {
					return canvas.height - y - height;
				}

				draw();
			});
		</script>
	</body>
</html>
