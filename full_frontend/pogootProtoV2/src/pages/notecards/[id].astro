---
export const prerender = false;
import Layout from "../../layouts/Layout.astro";
import Notecard from "../../components/Notecard.astro";
const { env } = Astro.locals.runtime;
const { id } = Astro.params;
import * as fzstd from "fzstd";

let data = "";
let other_data = "";
let debug_data = "";
let len = 0;
console.log("Trying...");
try {
  console.log("Getting...");
  data = await env.NOTECARDBUCKET.get("pogootdata/" + id);
  if (data == null) {
    console.log("Null...");
    data = JSON.parse(
      '[{"front":["Error loading Notecards"],"back":["Error loading Notecards Back"]}, {"front":["Error loading Notecards 2"],"back":["Error loading Notecards 2 Back"]}, {"front":["Error loading Notecards 3"],"back":["Error loading Notecards 3 Back"]}, {"front":["Error loading Notecards 4"],"back":["Error loading Notecards 4 Back"]}]',
    );
  } else {
    console.log("Into Buffer");
    let arrayBuffer = await data.arrayBuffer();
    console.log("create text decoder", JSON.stringify(arrayBuffer));
    let utf8decoder = new TextDecoder();
    console.log("into array");
    const compressed = new Uint8Array(arrayBuffer);
    console.log("decompressing", JSON.stringify(compressed));
    const decompressed = fzstd.decompress(compressed);
    console.log("decoding");
    const decoded = utf8decoder.decode(decompressed);
    console.log("decoded", decoded);
    data = decoded;
    debug_data = data;
    let temp_data = JSON.parse(data);

    data = temp_data[1];
    other_data = temp_data[0];

    // len = data.length;
  }
} catch (error) {
  console.log(error);
  data = JSON.parse(
    '[{"front":["Error loading Notecards"],"back":["Error loading Notecards Back"]}, {"front":["Error loading Notecards 2"],"back":["Error loading Notecards 2 Back"]}]',
  );
}

len = data.length;
let counter = 1;
let other_counter = 1;
---

<Layout title="Notecard | Sweep.rs">
  <div id="infoTitle"><h1>{other_data.title}</h1></div>
  <main id="main">
    {
      data.map((item) => (
        <Notecard
          front_text={item.front}
          back_text={item.back}
          idcount={counter++}
        />
      ))
    }
  </main>
  <div id="controlbar">
    <div id="counter">
      <strong id="currentindex">1/</strong><strong id="maxlen">{len}</strong>
    </div><div id="arrows">
      <img id="leftarrow" class="svg" src="/arrowleft.svg" /><img
        id="rightarrow"
        class="svg"
        src="/arrowright.svg"
      />
    </div>
  </div>
  <div id="actionbar">
    <mdui-button variant="elevated" id="edit" class="actionButton"
      >Edit</mdui-button
    >
    <mdui-button variant="elevated" id="export" class="actionButton"
      >Export</mdui-button
    >
    <mdui-button variant="elevated" id="copy" class="actionButton"
      >Copy</mdui-button
    >
  </div>
  <div id="info">
    <div id="infoDesc">{other_data.desc}</div>
  </div>

  <div id="termlist">
    {
      data.map((item) => (
        <div class="termitem">
          <div class="termcount">{other_counter++}</div>
          <div class="termfront">{item.front}</div>
          <div class="termback">{item.back}</div>
        </div>
      ))
    }
  </div>
  <div id="rawData">{JSON.stringify(data)}</div>
</Layout>
<style>
  #infoTitle {
    width: 50%;
    left: 25%;
    position: relative;
  }
  .actionButton {
    border-radius: var(--mdui-shape-corner-small);
  }
  :global(#footer) {
    /* position: relative; */
  }
  :global(#slot_container) {
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    min-height: 100vh;
    margin-top: 150px;
  }
  #info {
    height: fit-content;
    width: 50%;
    left: 25%;
    position: relative;
    margin-bottom: 10px;
    padding-left: 5px;
  }
  #termlist {
    position: relative;
    /* top: 84%; */
    left: 25%;
    width: 50%;
    display: block;
    margin-bottom: 20px;
  }
  .termitem {
    display: grid;
    grid-template-columns: 10% 45% 45%;
    padding: 4px;
    margin-bottom: 6px;
    background-color: white;
    height: fit-content;
    color: black;
    text-align: center;
    border-radius: 2px;
    height: 30px;
    align-items: center;
  }
  #actionbar {
    margin-top: 15px;
    margin-bottom: 15px;
    position: relative;
    display: grid;
    grid-template-columns: repeat(10, calc(calc(50% - 20px) / 6));
    column-gap: 10px;
    background-color: white;
    padding: 10px;
    /* padding-right: 0px; */
    border-radius: 4px 4px 4px 4px;
    height: 30px;
    align-content: center;
    /* justify-content: center; */
    left: 25%;
    width: calc(50% - 20px);
  }
  #rawData {
    display: none;
  }
  .svg {
    top: 20px;
    width: 20px;
  }
  body {
    display: grid;
    width: 100%;
    height: 100%;
    margin: 0;
    background-color: var(--blue);
    color: white;
    font-family: LeagueSpartan;
    font-size: 20px;
  }

  main {
    position: relative;
    width: calc(50% - 4px);
    height: 700px;
    /* top: 200px; */
    /* top: 25%; */
    left: calc(25% + 2px);
    text-align: center;
    outline: white solid 2px;
    margin-bottom: 10px;
  }
  #controlbar {
    position: relative;
    /* top: 76%; */
    width: 50%;
    left: 25%;
    display: grid;
    grid-template-columns: 50% 50%;
  }
  #counter {
    width: 10%;
  }
  #arrows {
    text-align: right;
  }
</style>
