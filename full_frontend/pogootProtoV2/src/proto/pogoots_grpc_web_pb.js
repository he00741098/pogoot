/**
 * @fileoverview gRPC-Web generated client stub for pogootRefactoredRefactored
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.6
// source: pogoots.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.pogootRefactoredRefactored = require('./pogoots_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pogootRefactoredRefactored.NotecardServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pogootRefactoredRefactored.NotecardServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.NotecardListUploadRequest,
 *   !proto.pogootRefactoredRefactored.NotecardUploadResponse>}
 */
const methodDescriptor_NotecardService_Upload = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.NotecardService/Upload',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.NotecardListUploadRequest,
  proto.pogootRefactoredRefactored.NotecardUploadResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.NotecardUploadResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.NotecardUploadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.NotecardUploadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.NotecardServiceClient.prototype.upload =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.NotecardService/Upload',
      request,
      metadata || {},
      methodDescriptor_NotecardService_Upload,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.NotecardUploadResponse>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.NotecardServicePromiseClient.prototype.upload =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.NotecardService/Upload',
      request,
      metadata || {},
      methodDescriptor_NotecardService_Upload);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.NotecardLibraryRequest,
 *   !proto.pogootRefactoredRefactored.NotecardLibraryList>}
 */
const methodDescriptor_NotecardService_Fetch = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.NotecardService/Fetch',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.NotecardLibraryRequest,
  proto.pogootRefactoredRefactored.NotecardLibraryList,
  /**
   * @param {!proto.pogootRefactoredRefactored.NotecardLibraryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.NotecardLibraryList.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.NotecardLibraryList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.NotecardLibraryList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.NotecardServiceClient.prototype.fetch =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.NotecardService/Fetch',
      request,
      metadata || {},
      methodDescriptor_NotecardService_Fetch,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.NotecardLibraryList>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.NotecardServicePromiseClient.prototype.fetch =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.NotecardService/Fetch',
      request,
      metadata || {},
      methodDescriptor_NotecardService_Fetch);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.NotecardModifyRequest,
 *   !proto.pogootRefactoredRefactored.NotecardUploadResponse>}
 */
const methodDescriptor_NotecardService_Modify = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.NotecardService/Modify',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.NotecardModifyRequest,
  proto.pogootRefactoredRefactored.NotecardUploadResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.NotecardModifyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.NotecardUploadResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardModifyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.NotecardUploadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.NotecardUploadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.NotecardServiceClient.prototype.modify =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.NotecardService/Modify',
      request,
      metadata || {},
      methodDescriptor_NotecardService_Modify,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardModifyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.NotecardUploadResponse>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.NotecardServicePromiseClient.prototype.modify =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.NotecardService/Modify',
      request,
      metadata || {},
      methodDescriptor_NotecardService_Modify);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.NotecardFetchRequest,
 *   !proto.pogootRefactoredRefactored.NotecardFetchResponse>}
 */
const methodDescriptor_NotecardService_GetNotecards = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.NotecardService/GetNotecards',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.NotecardFetchRequest,
  proto.pogootRefactoredRefactored.NotecardFetchResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.NotecardFetchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.NotecardFetchResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardFetchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.NotecardFetchResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.NotecardFetchResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.NotecardServiceClient.prototype.getNotecards =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.NotecardService/GetNotecards',
      request,
      metadata || {},
      methodDescriptor_NotecardService_GetNotecards,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardFetchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.NotecardFetchResponse>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.NotecardServicePromiseClient.prototype.getNotecards =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.NotecardService/GetNotecards',
      request,
      metadata || {},
      methodDescriptor_NotecardService_GetNotecards);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pogootRefactoredRefactored.LoginServerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pogootRefactoredRefactored.LoginServerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.UserLoginRequest,
 *   !proto.pogootRefactoredRefactored.LoginResponse>}
 */
const methodDescriptor_LoginServer_Login = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.LoginServer/Login',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.UserLoginRequest,
  proto.pogootRefactoredRefactored.LoginResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.UserLoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.UserLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LoginServerClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.LoginServer/Login',
      request,
      metadata || {},
      methodDescriptor_LoginServer_Login,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.UserLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.LoginServerPromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.LoginServer/Login',
      request,
      metadata || {},
      methodDescriptor_LoginServer_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest,
 *   !proto.pogootRefactoredRefactored.LoginResponse>}
 */
const methodDescriptor_LoginServer_Register = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.LoginServer/Register',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest,
  proto.pogootRefactoredRefactored.LoginResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LoginServerClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.LoginServer/Register',
      request,
      metadata || {},
      methodDescriptor_LoginServer_Register,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.LoginServerPromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.LoginServer/Register',
      request,
      metadata || {},
      methodDescriptor_LoginServer_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.UserPasswordUpdateRequest,
 *   !proto.pogootRefactoredRefactored.LoginResponse>}
 */
const methodDescriptor_LoginServer_Update = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.LoginServer/Update',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.UserPasswordUpdateRequest,
  proto.pogootRefactoredRefactored.LoginResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LoginServerClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.LoginServer/Update',
      request,
      metadata || {},
      methodDescriptor_LoginServer_Update,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.LoginServerPromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.LoginServer/Update',
      request,
      metadata || {},
      methodDescriptor_LoginServer_Update);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pogootRefactoredRefactored.PogootPlayerServerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pogootRefactoredRefactored.PogootPlayerServerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.PogootRequest,
 *   !proto.pogootRefactoredRefactored.PogootJoinCode>}
 */
const methodDescriptor_PogootPlayerServer_Join = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.PogootPlayerServer/Join',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.PogootRequest,
  proto.pogootRefactoredRefactored.PogootJoinCode,
  /**
   * @param {!proto.pogootRefactoredRefactored.PogootRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.PogootJoinCode.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.PogootRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.PogootJoinCode)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.PogootJoinCode>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.PogootPlayerServerClient.prototype.join =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.PogootPlayerServer/Join',
      request,
      metadata || {},
      methodDescriptor_PogootPlayerServer_Join,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.PogootRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.PogootJoinCode>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.PogootPlayerServerPromiseClient.prototype.join =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.PogootPlayerServer/Join',
      request,
      metadata || {},
      methodDescriptor_PogootPlayerServer_Join);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.PogootJoinCode,
 *   !proto.pogootRefactoredRefactored.PogootQuestion>}
 */
const methodDescriptor_PogootPlayerServer_EstablishQuestionStream = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.PogootPlayerServer/EstablishQuestionStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.pogootRefactoredRefactored.PogootJoinCode,
  proto.pogootRefactoredRefactored.PogootQuestion,
  /**
   * @param {!proto.pogootRefactoredRefactored.PogootJoinCode} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.PogootQuestion.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.PogootJoinCode} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.PogootQuestion>}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.PogootPlayerServerClient.prototype.establishQuestionStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/pogootRefactoredRefactored.PogootPlayerServer/EstablishQuestionStream',
      request,
      metadata || {},
      methodDescriptor_PogootPlayerServer_EstablishQuestionStream);
};


/**
 * @param {!proto.pogootRefactoredRefactored.PogootJoinCode} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.PogootQuestion>}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.PogootPlayerServerPromiseClient.prototype.establishQuestionStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/pogootRefactoredRefactored.PogootPlayerServer/EstablishQuestionStream',
      request,
      metadata || {},
      methodDescriptor_PogootPlayerServer_EstablishQuestionStream);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pogootRefactoredRefactored.LeadServerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pogootRefactoredRefactored.LeadServerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.PogootCreationRequest,
 *   !proto.pogootRefactoredRefactored.PogootCreationResponse>}
 */
const methodDescriptor_LeadServer_Create = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.LeadServer/Create',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.PogootCreationRequest,
  proto.pogootRefactoredRefactored.PogootCreationResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.PogootCreationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.PogootCreationResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.PogootCreationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.PogootCreationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.PogootCreationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LeadServerClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/Create',
      request,
      metadata || {},
      methodDescriptor_LeadServer_Create,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.PogootCreationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.PogootCreationResponse>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.LeadServerPromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/Create',
      request,
      metadata || {},
      methodDescriptor_LeadServer_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.Progress,
 *   !proto.pogootRefactoredRefactored.RoundResultResponse>}
 */
const methodDescriptor_LeadServer_FinishRound = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.LeadServer/FinishRound',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.Progress,
  proto.pogootRefactoredRefactored.RoundResultResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.Progress} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.RoundResultResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.Progress} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.RoundResultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.RoundResultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LeadServerClient.prototype.finishRound =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/FinishRound',
      request,
      metadata || {},
      methodDescriptor_LeadServer_FinishRound,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.Progress} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.RoundResultResponse>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.LeadServerPromiseClient.prototype.finishRound =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/FinishRound',
      request,
      metadata || {},
      methodDescriptor_LeadServer_FinishRound);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.Progress,
 *   !proto.pogootRefactoredRefactored.PogootQuestion>}
 */
const methodDescriptor_LeadServer_StartNextRound = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.LeadServer/StartNextRound',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.Progress,
  proto.pogootRefactoredRefactored.PogootQuestion,
  /**
   * @param {!proto.pogootRefactoredRefactored.Progress} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.PogootQuestion.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.Progress} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.PogootQuestion)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.PogootQuestion>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LeadServerClient.prototype.startNextRound =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/StartNextRound',
      request,
      metadata || {},
      methodDescriptor_LeadServer_StartNextRound,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.Progress} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.PogootQuestion>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.LeadServerPromiseClient.prototype.startNextRound =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/StartNextRound',
      request,
      metadata || {},
      methodDescriptor_LeadServer_StartNextRound);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.ManagerPlayerRequest,
 *   !proto.pogootRefactoredRefactored.Progress>}
 */
const methodDescriptor_LeadServer_Manage = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.LeadServer/Manage',
  grpc.web.MethodType.UNARY,
  proto.pogootRefactoredRefactored.ManagerPlayerRequest,
  proto.pogootRefactoredRefactored.Progress,
  /**
   * @param {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.Progress.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pogootRefactoredRefactored.Progress)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.Progress>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LeadServerClient.prototype.manage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/Manage',
      request,
      metadata || {},
      methodDescriptor_LeadServer_Manage,
      callback);
};


/**
 * @param {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pogootRefactoredRefactored.Progress>}
 *     Promise that resolves to the response
 */
proto.pogootRefactoredRefactored.LeadServerPromiseClient.prototype.manage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/Manage',
      request,
      metadata || {},
      methodDescriptor_LeadServer_Manage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pogootRefactoredRefactored.Progress,
 *   !proto.pogootRefactoredRefactored.GameStartInfoResponse>}
 */
const methodDescriptor_LeadServer_PlayerJoins = new grpc.web.MethodDescriptor(
  '/pogootRefactoredRefactored.LeadServer/PlayerJoins',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.pogootRefactoredRefactored.Progress,
  proto.pogootRefactoredRefactored.GameStartInfoResponse,
  /**
   * @param {!proto.pogootRefactoredRefactored.Progress} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pogootRefactoredRefactored.GameStartInfoResponse.deserializeBinary
);


/**
 * @param {!proto.pogootRefactoredRefactored.Progress} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.GameStartInfoResponse>}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LeadServerClient.prototype.playerJoins =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/PlayerJoins',
      request,
      metadata || {},
      methodDescriptor_LeadServer_PlayerJoins);
};


/**
 * @param {!proto.pogootRefactoredRefactored.Progress} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.pogootRefactoredRefactored.GameStartInfoResponse>}
 *     The XHR Node Readable Stream
 */
proto.pogootRefactoredRefactored.LeadServerPromiseClient.prototype.playerJoins =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/pogootRefactoredRefactored.LeadServer/PlayerJoins',
      request,
      metadata || {},
      methodDescriptor_LeadServer_PlayerJoins);
};


module.exports = proto.pogootRefactoredRefactored;

