// source: pogoots.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.pogootRefactoredRefactored.GameStartInfoResponse', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.LoginResponse', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.ManagerPlayerRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.Notecard', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardFetchRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardFetchResponse', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardLibraryData', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardLibraryList', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardLibraryRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardList', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardListUploadRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardModifyRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.NotecardUploadResponse', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.PogootAnswerRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.PogootCreationRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.PogootCreationResponse', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.PogootJoinCode', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.PogootQuestion', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.PogootQuestionList', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.PogootRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.PogootResultsResponse', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.Progress', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.RoundResultResponse', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.UserLoginRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.UserPasswordUpdateRequest', null, global);
goog.exportSymbol('proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardModifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardModifyRequest.displayName = 'proto.pogootRefactoredRefactored.NotecardModifyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardLibraryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardLibraryRequest.displayName = 'proto.pogootRefactoredRefactored.NotecardLibraryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardListUploadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardListUploadRequest.displayName = 'proto.pogootRefactoredRefactored.NotecardListUploadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pogootRefactoredRefactored.NotecardList.repeatedFields_, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardList.displayName = 'proto.pogootRefactoredRefactored.NotecardList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardLibraryList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pogootRefactoredRefactored.NotecardLibraryList.repeatedFields_, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardLibraryList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardLibraryList.displayName = 'proto.pogootRefactoredRefactored.NotecardLibraryList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardFetchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardFetchRequest.displayName = 'proto.pogootRefactoredRefactored.NotecardFetchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardFetchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardFetchResponse.displayName = 'proto.pogootRefactoredRefactored.NotecardFetchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardLibraryData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardLibraryData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardLibraryData.displayName = 'proto.pogootRefactoredRefactored.NotecardLibraryData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.Notecard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pogootRefactoredRefactored.Notecard.repeatedFields_, null);
};
goog.inherits(proto.pogootRefactoredRefactored.Notecard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.Notecard.displayName = 'proto.pogootRefactoredRefactored.Notecard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.NotecardUploadResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.NotecardUploadResponse.displayName = 'proto.pogootRefactoredRefactored.NotecardUploadResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.displayName = 'proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.UserLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.UserLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.UserLoginRequest.displayName = 'proto.pogootRefactoredRefactored.UserLoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.UserPasswordUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.displayName = 'proto.pogootRefactoredRefactored.UserPasswordUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.LoginResponse.displayName = 'proto.pogootRefactoredRefactored.LoginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.PogootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.PogootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.PogootRequest.displayName = 'proto.pogootRefactoredRefactored.PogootRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.PogootJoinCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.PogootJoinCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.PogootJoinCode.displayName = 'proto.pogootRefactoredRefactored.PogootJoinCode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.PogootQuestionList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pogootRefactoredRefactored.PogootQuestionList.repeatedFields_, null);
};
goog.inherits(proto.pogootRefactoredRefactored.PogootQuestionList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.PogootQuestionList.displayName = 'proto.pogootRefactoredRefactored.PogootQuestionList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.PogootQuestion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pogootRefactoredRefactored.PogootQuestion.repeatedFields_, null);
};
goog.inherits(proto.pogootRefactoredRefactored.PogootQuestion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.PogootQuestion.displayName = 'proto.pogootRefactoredRefactored.PogootQuestion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.PogootResultsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.PogootResultsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.PogootResultsResponse.displayName = 'proto.pogootRefactoredRefactored.PogootResultsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.PogootAnswerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.PogootAnswerRequest.displayName = 'proto.pogootRefactoredRefactored.PogootAnswerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.PogootCreationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.PogootCreationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.PogootCreationRequest.displayName = 'proto.pogootRefactoredRefactored.PogootCreationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.PogootCreationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.PogootCreationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.PogootCreationResponse.displayName = 'proto.pogootRefactoredRefactored.PogootCreationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.Progress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.Progress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.Progress.displayName = 'proto.pogootRefactoredRefactored.Progress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.RoundResultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pogootRefactoredRefactored.RoundResultResponse.repeatedFields_, null);
};
goog.inherits(proto.pogootRefactoredRefactored.RoundResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.RoundResultResponse.displayName = 'proto.pogootRefactoredRefactored.RoundResultResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.ManagerPlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.ManagerPlayerRequest.displayName = 'proto.pogootRefactoredRefactored.ManagerPlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pogootRefactoredRefactored.GameStartInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pogootRefactoredRefactored.GameStartInfoResponse.displayName = 'proto.pogootRefactoredRefactored.GameStartInfoResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardModifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardModifyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    notecards: (f = msg.getNotecards()) && proto.pogootRefactoredRefactored.NotecardList.toObject(includeInstance, f),
    authToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tags: jspb.Message.getFieldWithDefault(msg, 6, ""),
    school: jspb.Message.getFieldWithDefault(msg, 7, ""),
    username: jspb.Message.getFieldWithDefault(msg, 8, ""),
    cfid: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardModifyRequest;
  return proto.pogootRefactoredRefactored.NotecardModifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardModifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pogootRefactoredRefactored.NotecardList;
      reader.readMessage(value,proto.pogootRefactoredRefactored.NotecardList.deserializeBinaryFromReader);
      msg.setNotecards(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchool(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCfid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardModifyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardModifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotecards();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pogootRefactoredRefactored.NotecardList.serializeBinaryToWriter
    );
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCfid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional NotecardList notecards = 1;
 * @return {?proto.pogootRefactoredRefactored.NotecardList}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.getNotecards = function() {
  return /** @type{?proto.pogootRefactoredRefactored.NotecardList} */ (
    jspb.Message.getWrapperField(this, proto.pogootRefactoredRefactored.NotecardList, 1));
};


/**
 * @param {?proto.pogootRefactoredRefactored.NotecardList|undefined} value
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
*/
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.setNotecards = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.clearNotecards = function() {
  return this.setNotecards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.hasNotecards = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string auth_token = 3;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.setAuthToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.setTitle = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.clearTitle = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string tags = 6;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.setTags = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.clearTags = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.hasTags = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string school = 7;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.getSchool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.setSchool = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.clearSchool = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.hasSchool = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string username = 8;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string cfid = 9;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.getCfid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardModifyRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardModifyRequest.prototype.setCfid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardLibraryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryRequest}
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardLibraryRequest;
  return proto.pogootRefactoredRefactored.NotecardLibraryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryRequest}
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardLibraryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string auth_token = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryRequest.prototype.setAuthToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardListUploadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    notecards: (f = msg.getNotecards()) && proto.pogootRefactoredRefactored.NotecardList.toObject(includeInstance, f),
    authToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
    tags: jspb.Message.getFieldWithDefault(msg, 6, ""),
    school: jspb.Message.getFieldWithDefault(msg, 7, ""),
    username: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardListUploadRequest;
  return proto.pogootRefactoredRefactored.NotecardListUploadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pogootRefactoredRefactored.NotecardList;
      reader.readMessage(value,proto.pogootRefactoredRefactored.NotecardList.deserializeBinaryFromReader);
      msg.setNotecards(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchool(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardListUploadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotecards();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pogootRefactoredRefactored.NotecardList.serializeBinaryToWriter
    );
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTags();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSchool();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional NotecardList notecards = 1;
 * @return {?proto.pogootRefactoredRefactored.NotecardList}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.getNotecards = function() {
  return /** @type{?proto.pogootRefactoredRefactored.NotecardList} */ (
    jspb.Message.getWrapperField(this, proto.pogootRefactoredRefactored.NotecardList, 1));
};


/**
 * @param {?proto.pogootRefactoredRefactored.NotecardList|undefined} value
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} returns this
*/
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.setNotecards = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.clearNotecards = function() {
  return this.setNotecards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.hasNotecards = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string auth_token = 3;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.setAuthToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string description = 5;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string tags = 6;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.setTags = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string school = 7;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.getSchool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.setSchool = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string username = 8;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardListUploadRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardListUploadRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pogootRefactoredRefactored.NotecardList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardList.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardList.toObject = function(includeInstance, msg) {
  var f, obj = {
    notecardsList: jspb.Message.toObjectList(msg.getNotecardsList(),
    proto.pogootRefactoredRefactored.Notecard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardList}
 */
proto.pogootRefactoredRefactored.NotecardList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardList;
  return proto.pogootRefactoredRefactored.NotecardList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardList}
 */
proto.pogootRefactoredRefactored.NotecardList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pogootRefactoredRefactored.Notecard;
      reader.readMessage(value,proto.pogootRefactoredRefactored.Notecard.deserializeBinaryFromReader);
      msg.addNotecards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotecardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pogootRefactoredRefactored.Notecard.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Notecard notecards = 1;
 * @return {!Array<!proto.pogootRefactoredRefactored.Notecard>}
 */
proto.pogootRefactoredRefactored.NotecardList.prototype.getNotecardsList = function() {
  return /** @type{!Array<!proto.pogootRefactoredRefactored.Notecard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pogootRefactoredRefactored.Notecard, 1));
};


/**
 * @param {!Array<!proto.pogootRefactoredRefactored.Notecard>} value
 * @return {!proto.pogootRefactoredRefactored.NotecardList} returns this
*/
proto.pogootRefactoredRefactored.NotecardList.prototype.setNotecardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pogootRefactoredRefactored.Notecard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pogootRefactoredRefactored.Notecard}
 */
proto.pogootRefactoredRefactored.NotecardList.prototype.addNotecards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pogootRefactoredRefactored.Notecard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pogootRefactoredRefactored.NotecardList} returns this
 */
proto.pogootRefactoredRefactored.NotecardList.prototype.clearNotecardsList = function() {
  return this.setNotecardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardLibraryList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.toObject = function(includeInstance, msg) {
  var f, obj = {
    libraryList: jspb.Message.toObjectList(msg.getLibraryList(),
    proto.pogootRefactoredRefactored.NotecardLibraryData.toObject, includeInstance),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryList}
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardLibraryList;
  return proto.pogootRefactoredRefactored.NotecardLibraryList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryList}
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pogootRefactoredRefactored.NotecardLibraryData;
      reader.readMessage(value,proto.pogootRefactoredRefactored.NotecardLibraryData.deserializeBinaryFromReader);
      msg.addLibrary(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardLibraryList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLibraryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pogootRefactoredRefactored.NotecardLibraryData.serializeBinaryToWriter
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated NotecardLibraryData library = 1;
 * @return {!Array<!proto.pogootRefactoredRefactored.NotecardLibraryData>}
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.prototype.getLibraryList = function() {
  return /** @type{!Array<!proto.pogootRefactoredRefactored.NotecardLibraryData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pogootRefactoredRefactored.NotecardLibraryData, 1));
};


/**
 * @param {!Array<!proto.pogootRefactoredRefactored.NotecardLibraryData>} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryList} returns this
*/
proto.pogootRefactoredRefactored.NotecardLibraryList.prototype.setLibraryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData}
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.prototype.addLibrary = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pogootRefactoredRefactored.NotecardLibraryData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryList} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.prototype.clearLibraryList = function() {
  return this.setLibraryList([]);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryList} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryList.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardFetchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardFetchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    auth: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchRequest}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardFetchRequest;
  return proto.pogootRefactoredRefactored.NotecardFetchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardFetchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchRequest}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardFetchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardFetchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string auth = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.getAuth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.setAuth = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.clearAuth = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchRequest} returns this
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardFetchRequest.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardFetchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardFetchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    notecards: (f = msg.getNotecards()) && proto.pogootRefactoredRefactored.NotecardList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchResponse}
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardFetchResponse;
  return proto.pogootRefactoredRefactored.NotecardFetchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardFetchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchResponse}
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.pogootRefactoredRefactored.NotecardList;
      reader.readMessage(value,proto.pogootRefactoredRefactored.NotecardList.deserializeBinaryFromReader);
      msg.setNotecards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardFetchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardFetchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getNotecards();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pogootRefactoredRefactored.NotecardList.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchResponse} returns this
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional NotecardList notecards = 2;
 * @return {?proto.pogootRefactoredRefactored.NotecardList}
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.prototype.getNotecards = function() {
  return /** @type{?proto.pogootRefactoredRefactored.NotecardList} */ (
    jspb.Message.getWrapperField(this, proto.pogootRefactoredRefactored.NotecardList, 2));
};


/**
 * @param {?proto.pogootRefactoredRefactored.NotecardList|undefined} value
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchResponse} returns this
*/
proto.pogootRefactoredRefactored.NotecardFetchResponse.prototype.setNotecards = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.NotecardFetchResponse} returns this
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.prototype.clearNotecards = function() {
  return this.setNotecards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardFetchResponse.prototype.hasNotecards = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardLibraryData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    school: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tags: jspb.Message.getFieldWithDefault(msg, 3, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cfid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    date: jspb.Message.getFieldWithDefault(msg, 6, ""),
    terms: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardLibraryData;
  return proto.pogootRefactoredRefactored.NotecardLibraryData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchool(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTags(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCfid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTerms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardLibraryData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardLibraryData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchool();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTags();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCfid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTerms();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string school = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.getSchool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.setSchool = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tags = 3;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.getTags = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.setTags = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string desc = 4;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string CFID = 5;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.getCfid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.setCfid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string date = 6;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 terms = 7;
 * @return {number}
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.getTerms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pogootRefactoredRefactored.NotecardLibraryData} returns this
 */
proto.pogootRefactoredRefactored.NotecardLibraryData.prototype.setTerms = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pogootRefactoredRefactored.Notecard.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.Notecard.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.Notecard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.Notecard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.Notecard.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    backList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.Notecard}
 */
proto.pogootRefactoredRefactored.Notecard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.Notecard;
  return proto.pogootRefactoredRefactored.Notecard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.Notecard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.Notecard}
 */
proto.pogootRefactoredRefactored.Notecard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFront(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.Notecard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.Notecard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.Notecard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.Notecard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrontList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getBackList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string front = 1;
 * @return {!Array<string>}
 */
proto.pogootRefactoredRefactored.Notecard.prototype.getFrontList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pogootRefactoredRefactored.Notecard} returns this
 */
proto.pogootRefactoredRefactored.Notecard.prototype.setFrontList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pogootRefactoredRefactored.Notecard} returns this
 */
proto.pogootRefactoredRefactored.Notecard.prototype.addFront = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pogootRefactoredRefactored.Notecard} returns this
 */
proto.pogootRefactoredRefactored.Notecard.prototype.clearFrontList = function() {
  return this.setFrontList([]);
};


/**
 * repeated string back = 2;
 * @return {!Array<string>}
 */
proto.pogootRefactoredRefactored.Notecard.prototype.getBackList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pogootRefactoredRefactored.Notecard} returns this
 */
proto.pogootRefactoredRefactored.Notecard.prototype.setBackList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pogootRefactoredRefactored.Notecard} returns this
 */
proto.pogootRefactoredRefactored.Notecard.prototype.addBack = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pogootRefactoredRefactored.Notecard} returns this
 */
proto.pogootRefactoredRefactored.Notecard.prototype.clearBackList = function() {
  return this.setBackList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.NotecardUploadResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.NotecardUploadResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.NotecardUploadResponse}
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.NotecardUploadResponse;
  return proto.pogootRefactoredRefactored.NotecardUploadResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.NotecardUploadResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.NotecardUploadResponse}
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.NotecardUploadResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.NotecardUploadResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pogootRefactoredRefactored.NotecardUploadResponse} returns this
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.NotecardUploadResponse} returns this
 */
proto.pogootRefactoredRefactored.NotecardUploadResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    turn: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest}
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest;
  return proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest}
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTurn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTurn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} returns this
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} returns this
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} returns this
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string turn = 4;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.getTurn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest} returns this
 */
proto.pogootRefactoredRefactored.UserRegisterWithEmailRequest.prototype.setTurn = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.UserLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.UserLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.UserLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.UserLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    turn: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.UserLoginRequest}
 */
proto.pogootRefactoredRefactored.UserLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.UserLoginRequest;
  return proto.pogootRefactoredRefactored.UserLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.UserLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.UserLoginRequest}
 */
proto.pogootRefactoredRefactored.UserLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTurn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.UserLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.UserLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.UserLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.UserLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTurn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserLoginRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserLoginRequest} returns this
 */
proto.pogootRefactoredRefactored.UserLoginRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserLoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserLoginRequest} returns this
 */
proto.pogootRefactoredRefactored.UserLoginRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string turn = 4;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserLoginRequest.prototype.getTurn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserLoginRequest} returns this
 */
proto.pogootRefactoredRefactored.UserLoginRequest.prototype.setTurn = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest}
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.UserPasswordUpdateRequest;
  return proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest}
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest} returns this
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.UserPasswordUpdateRequest} returns this
 */
proto.pogootRefactoredRefactored.UserPasswordUpdateRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.LoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.LoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.LoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    mystery: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.LoginResponse}
 */
proto.pogootRefactoredRefactored.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.LoginResponse;
  return proto.pogootRefactoredRefactored.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.LoginResponse}
 */
proto.pogootRefactoredRefactored.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMystery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.LoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMystery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.LoginResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pogootRefactoredRefactored.LoginResponse} returns this
 */
proto.pogootRefactoredRefactored.LoginResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string mystery = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.LoginResponse.prototype.getMystery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.LoginResponse} returns this
 */
proto.pogootRefactoredRefactored.LoginResponse.prototype.setMystery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.PogootRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.PogootRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.PogootRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.PogootRequest}
 */
proto.pogootRefactoredRefactored.PogootRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.PogootRequest;
  return proto.pogootRefactoredRefactored.PogootRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.PogootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.PogootRequest}
 */
proto.pogootRefactoredRefactored.PogootRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.PogootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.PogootRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.PogootRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string gameid = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.PogootRequest.prototype.getGameid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.PogootRequest} returns this
 */
proto.pogootRefactoredRefactored.PogootRequest.prototype.setGameid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.PogootRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.PogootRequest} returns this
 */
proto.pogootRefactoredRefactored.PogootRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.PogootJoinCode.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.PogootJoinCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.PogootJoinCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootJoinCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    tempuuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.PogootJoinCode}
 */
proto.pogootRefactoredRefactored.PogootJoinCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.PogootJoinCode;
  return proto.pogootRefactoredRefactored.PogootJoinCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.PogootJoinCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.PogootJoinCode}
 */
proto.pogootRefactoredRefactored.PogootJoinCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTempuuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.PogootJoinCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.PogootJoinCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.PogootJoinCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootJoinCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTempuuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tempuuid = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.PogootJoinCode.prototype.getTempuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.PogootJoinCode} returns this
 */
proto.pogootRefactoredRefactored.PogootJoinCode.prototype.setTempuuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pogootRefactoredRefactored.PogootQuestionList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.PogootQuestionList.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.PogootQuestionList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.PogootQuestionList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootQuestionList.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionsList: jspb.Message.toObjectList(msg.getQuestionsList(),
    proto.pogootRefactoredRefactored.PogootQuestion.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.PogootQuestionList}
 */
proto.pogootRefactoredRefactored.PogootQuestionList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.PogootQuestionList;
  return proto.pogootRefactoredRefactored.PogootQuestionList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.PogootQuestionList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.PogootQuestionList}
 */
proto.pogootRefactoredRefactored.PogootQuestionList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pogootRefactoredRefactored.PogootQuestion;
      reader.readMessage(value,proto.pogootRefactoredRefactored.PogootQuestion.deserializeBinaryFromReader);
      msg.addQuestions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.PogootQuestionList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.PogootQuestionList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.PogootQuestionList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootQuestionList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pogootRefactoredRefactored.PogootQuestion.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PogootQuestion questions = 1;
 * @return {!Array<!proto.pogootRefactoredRefactored.PogootQuestion>}
 */
proto.pogootRefactoredRefactored.PogootQuestionList.prototype.getQuestionsList = function() {
  return /** @type{!Array<!proto.pogootRefactoredRefactored.PogootQuestion>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pogootRefactoredRefactored.PogootQuestion, 1));
};


/**
 * @param {!Array<!proto.pogootRefactoredRefactored.PogootQuestion>} value
 * @return {!proto.pogootRefactoredRefactored.PogootQuestionList} returns this
*/
proto.pogootRefactoredRefactored.PogootQuestionList.prototype.setQuestionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pogootRefactoredRefactored.PogootQuestion=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pogootRefactoredRefactored.PogootQuestion}
 */
proto.pogootRefactoredRefactored.PogootQuestionList.prototype.addQuestions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pogootRefactoredRefactored.PogootQuestion, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pogootRefactoredRefactored.PogootQuestionList} returns this
 */
proto.pogootRefactoredRefactored.PogootQuestionList.prototype.clearQuestionsList = function() {
  return this.setQuestionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pogootRefactoredRefactored.PogootQuestion.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.PogootQuestion.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.PogootQuestion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.PogootQuestion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootQuestion.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: jspb.Message.getFieldWithDefault(msg, 1, ""),
    choicesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.PogootQuestion}
 */
proto.pogootRefactoredRefactored.PogootQuestion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.PogootQuestion;
  return proto.pogootRefactoredRefactored.PogootQuestion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.PogootQuestion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.PogootQuestion}
 */
proto.pogootRefactoredRefactored.PogootQuestion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addChoices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.PogootQuestion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.PogootQuestion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.PogootQuestion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootQuestion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChoicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string question = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.PogootQuestion.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.PogootQuestion} returns this
 */
proto.pogootRefactoredRefactored.PogootQuestion.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string choices = 2;
 * @return {!Array<string>}
 */
proto.pogootRefactoredRefactored.PogootQuestion.prototype.getChoicesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pogootRefactoredRefactored.PogootQuestion} returns this
 */
proto.pogootRefactoredRefactored.PogootQuestion.prototype.setChoicesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pogootRefactoredRefactored.PogootQuestion} returns this
 */
proto.pogootRefactoredRefactored.PogootQuestion.prototype.addChoices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pogootRefactoredRefactored.PogootQuestion} returns this
 */
proto.pogootRefactoredRefactored.PogootQuestion.prototype.clearChoicesList = function() {
  return this.setChoicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.PogootResultsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.PogootResultsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rank: jspb.Message.getFieldWithDefault(msg, 1, 0),
    position: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.PogootResultsResponse}
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.PogootResultsResponse;
  return proto.pogootRefactoredRefactored.PogootResultsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.PogootResultsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.PogootResultsResponse}
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRank(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.PogootResultsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.PogootResultsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRank();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 rank = 1;
 * @return {number}
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.prototype.getRank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pogootRefactoredRefactored.PogootResultsResponse} returns this
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.prototype.setRank = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string position = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.PogootResultsResponse} returns this
 */
proto.pogootRefactoredRefactored.PogootResultsResponse.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.PogootAnswerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.PogootAnswerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    answerindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tempuuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.PogootAnswerRequest}
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.PogootAnswerRequest;
  return proto.pogootRefactoredRefactored.PogootAnswerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.PogootAnswerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.PogootAnswerRequest}
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnswerindex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTempuuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.PogootAnswerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.PogootAnswerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswerindex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 answerIndex = 1;
 * @return {number}
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.prototype.getAnswerindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pogootRefactoredRefactored.PogootAnswerRequest} returns this
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.prototype.setAnswerindex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string tempuuid = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.prototype.getTempuuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.PogootAnswerRequest} returns this
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.prototype.setTempuuid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.PogootAnswerRequest} returns this
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.prototype.clearTempuuid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.PogootAnswerRequest.prototype.hasTempuuid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.PogootCreationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.PogootCreationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.PogootCreationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootCreationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.PogootCreationRequest}
 */
proto.pogootRefactoredRefactored.PogootCreationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.PogootCreationRequest;
  return proto.pogootRefactoredRefactored.PogootCreationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.PogootCreationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.PogootCreationRequest}
 */
proto.pogootRefactoredRefactored.PogootCreationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.PogootCreationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.PogootCreationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.PogootCreationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootCreationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.PogootCreationRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.PogootCreationRequest} returns this
 */
proto.pogootRefactoredRefactored.PogootCreationRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.PogootCreationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.PogootCreationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.PogootCreationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootCreationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.PogootCreationResponse}
 */
proto.pogootRefactoredRefactored.PogootCreationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.PogootCreationResponse;
  return proto.pogootRefactoredRefactored.PogootCreationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.PogootCreationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.PogootCreationResponse}
 */
proto.pogootRefactoredRefactored.PogootCreationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.PogootCreationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.PogootCreationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.PogootCreationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.PogootCreationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string gameid = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.PogootCreationResponse.prototype.getGameid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.PogootCreationResponse} returns this
 */
proto.pogootRefactoredRefactored.PogootCreationResponse.prototype.setGameid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.Progress.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.Progress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.Progress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.Progress.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.Progress}
 */
proto.pogootRefactoredRefactored.Progress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.Progress;
  return proto.pogootRefactoredRefactored.Progress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.Progress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.Progress}
 */
proto.pogootRefactoredRefactored.Progress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.Progress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.Progress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.Progress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.Progress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pogootRefactoredRefactored.RoundResultResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.RoundResultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.RoundResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.RoundResultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    answerdistroList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    intheleadList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.RoundResultResponse}
 */
proto.pogootRefactoredRefactored.RoundResultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.RoundResultResponse;
  return proto.pogootRefactoredRefactored.RoundResultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.RoundResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.RoundResultResponse}
 */
proto.pogootRefactoredRefactored.RoundResultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAnswerdistro(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addInthelead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.RoundResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.RoundResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.RoundResultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswerdistroList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getIntheleadList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated int32 answerdistro = 1;
 * @return {!Array<number>}
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.getAnswerdistroList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pogootRefactoredRefactored.RoundResultResponse} returns this
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.setAnswerdistroList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pogootRefactoredRefactored.RoundResultResponse} returns this
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.addAnswerdistro = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pogootRefactoredRefactored.RoundResultResponse} returns this
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.clearAnswerdistroList = function() {
  return this.setAnswerdistroList([]);
};


/**
 * repeated string inthelead = 2;
 * @return {!Array<string>}
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.getIntheleadList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pogootRefactoredRefactored.RoundResultResponse} returns this
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.setIntheleadList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pogootRefactoredRefactored.RoundResultResponse} returns this
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.addInthelead = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pogootRefactoredRefactored.RoundResultResponse} returns this
 */
proto.pogootRefactoredRefactored.RoundResultResponse.prototype.clearIntheleadList = function() {
  return this.setIntheleadList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.ManagerPlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kick: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.ManagerPlayerRequest}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.ManagerPlayerRequest;
  return proto.pogootRefactoredRefactored.ManagerPlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.ManagerPlayerRequest}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRename(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKick(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.ManagerPlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} returns this
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string rename = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.getRename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} returns this
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.setRename = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} returns this
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.clearRename = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.hasRename = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool kick = 3;
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.getKick = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} returns this
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.setKick = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.ManagerPlayerRequest} returns this
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.clearKick = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.ManagerPlayerRequest.prototype.hasKick = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pogootRefactoredRefactored.GameStartInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pogootRefactoredRefactored.GameStartInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    newplayer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gamepin: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pogootRefactoredRefactored.GameStartInfoResponse}
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pogootRefactoredRefactored.GameStartInfoResponse;
  return proto.pogootRefactoredRefactored.GameStartInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pogootRefactoredRefactored.GameStartInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pogootRefactoredRefactored.GameStartInfoResponse}
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewplayer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamepin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pogootRefactoredRefactored.GameStartInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pogootRefactoredRefactored.GameStartInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string newplayer = 1;
 * @return {string}
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.getNewplayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.GameStartInfoResponse} returns this
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.setNewplayer = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.GameStartInfoResponse} returns this
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.clearNewplayer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.hasNewplayer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gamePin = 2;
 * @return {string}
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.getGamepin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pogootRefactoredRefactored.GameStartInfoResponse} returns this
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.setGamepin = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.pogootRefactoredRefactored.GameStartInfoResponse} returns this
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.clearGamepin = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pogootRefactoredRefactored.GameStartInfoResponse.prototype.hasGamepin = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.pogootRefactoredRefactored);
